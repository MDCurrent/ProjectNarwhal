{"version":3,"sources":["../../src/bin/mtd.js"],"names":[],"mappings":"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","file":"mtd.js","sourcesContent":["\n/**\n * Created by tushar.mathur on 04/06/16.\n */\n\n'use strict'\nimport meow from 'meow'\nimport R from 'ramda'\nimport {demux, mux} from 'muxer'\nimport {Observable as O} from 'rx'\nimport * as Rx from '../RxFP'\nimport {\n  GetDownloadType,\n  DOWNLOAD_TYPES,\n  CliValidOptions,\n  CreateMTDFile,\n  DownloadFromMTDFile,\n  FinalizeDownload,\n  Completion,\n  BAR\n} from '../index'\nimport {Help, Status} from './Messages'\n\n/**\n * LIB\n */\nexport const Log = console.log.bind(console)\nexport const LogError = console.error.bind(console)\nexport const LogAlways = message => () => Log(message)\nexport const FlatMapShare = R.curry((func, $) => $.flatMap(func).share())\nexport const Size = meta$ => meta$.pluck('totalBytes').take(1)\nexport const ValidOptions = Rx.partition(CliValidOptions)\nexport const IsNewDownload = R.whereEq({type: DOWNLOAD_TYPES.NEW})\nexport const DownloadOptions = R.compose(R.map(Rx.pluck('options')), Rx.partition(IsNewDownload), GetDownloadType)\nexport const Executor = (signal$) => {\n  const [{size$, completion$, invalidOptions$, validOptions$}] = demux(\n    signal$, 'size$', 'completion$', 'invalidOptions$', 'validOptions$'\n  )\n  O.merge(\n    validOptions$.take(1).map(msg => [msg, LogAlways('\\nStarting...')]),\n    size$.map(msg => [msg, R.compose(Log, Status)]),\n    invalidOptions$.map(msg => [msg, LogAlways(Help)]),\n    completion$.map(msg => [msg, BAR])\n  ).subscribe(\n    ([msg, action]) => action(msg),\n    R.partial(LogError, ['Failure']), R.partial(Log, ['Complete'])\n  )\n}\n\nconst [validOptions$, invalidOptions$] = ValidOptions(O.just(meow(Help).flags).shareReplay(1))\nconst [new$, resume$] = DownloadOptions(validOptions$)\nconst created$ = FlatMapShare(CreateMTDFile, new$).takeLast(1)\nconst mtdFile$ = O.merge(resume$, Rx.sample([new$], created$).map(R.head)).pluck('mtdPath')\nconst downloaded$ = FlatMapShare(DownloadFromMTDFile, mtdFile$)\nconst [{fdR$, meta$}] = demux(downloaded$, 'meta$', 'fdR$')\nconst finalized$ = FlatMapShare(\n  FinalizeDownload,\n  Rx.sample([fdR$, meta$], downloaded$.last()).map(\n    ([fd, meta]) => ({fd$: O.just(fd), meta$: O.just(meta)})\n  ).last()\n)\nconst completion$ = Completion(meta$.throttle(1000))\nconst size$ = Size(meta$)\nExecutor(mux({finalized$, size$, completion$, invalidOptions$, validOptions$}))\n"]}