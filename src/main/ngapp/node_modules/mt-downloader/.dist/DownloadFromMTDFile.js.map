{"version":3,"sources":["../src/DownloadFromMTDFile.js"],"names":[],"mappings":";;;;AAIA;;;;;;;AAEA;;AACA;;AACA;;;;AACA;;;;;;;;;;;;;;;;;;;;AA+BO,MAAM,oDAAsB,gBAAE,MAAF,CAAS,CAAT,EAAY,CAAC,EAAC,IAAD,EAAO,IAAP,EAAD,EAAe,OAAf,EAAwB,KAAxB,KAAkC;;;;AAI/E,QAAM,MAAM,KAAK,IAAL,CAAU,eAAE,IAAF,CAAO,CAAC,OAAD,EAAU,IAAV,CAAP,CAAV,CAAZ;;;;;AAKA,QAAM,QAAQ,2BAAe,EAAC,IAAD,EAAO,GAAP,EAAf,CAAd;;;;;AAKA,QAAM,gBAAgB,0BAAc,EAAC,KAAD,EAAd,CAAtB;AACA,QAAM,QAAQ,sBAAU,EAAC,IAAD,EAAO,GAAP,EAAY,WAAW,aAAvB,EAAV,EACX,GADW,CACP,QAAQ,gBAAE,KAAF,CAAQ,IAAR,EAAc,KAAd,CADD,CAAd;;;;;AAMA,QAAM,EAAC,SAAD,EAAY,OAAZ,KAAuB,qBAC3B,CAAC,SAAD,EAAY,WAAZ,CAD2B,EACD,4BAAgB,IAAhB,EAAsB,KAAtB,EAA6B,KAA7B,EADC,CAA7B;;;;;AAOA,QAAM,aAAa,oBAAQ,MAAM,GAAN,uBAAR,EAAmC,SAAnC,CAAnB;;;;;AAKA,QAAM,iBAAiB,wBAAY,EAAC,IAAD,EAAO,GAAP,EAAY,OAAZ,EAAZ,CAAvB;;;;;AAKA,QAAM,SAAS,2BAAe,EAAC,KAAD,EAAQ,cAAR,EAAf,CAAf;;;;;AAKA,QAAM,eAAe,KAAK,KAAL,CAAW,sCAA0B;AACxD,OADwD;AAExD,aAAS,wBAAY,+BAAmB,MAAM,KAAN,CAAY,WAAZ,CAAnB,EAA6C,MAA7C,CAAZ,CAF+C;AAGxD,eAAW;AAH6C,GAA1B,CAAX,CAArB;;;;;AASA,SAAO,gBAAI;AACT,gBADS,EACK,SADL,EACgB,UADhB;AAET,oBAAgB,KAFP;AAGT,UAAM,GAHG,EAGE,aAHF;AAIT,WAAO,eAAE,KAAF,CAAQ,MAAR,EAAgB,KAAhB;AAJE,GAAJ,CAAP;AAMD,CA1DkC,CAA5B","file":"DownloadFromMTDFile.js","sourcesContent":["/**\n * Created by tushar.mathur on 29/06/16.\n */\n\n'use strict'\n\nimport {mux} from 'muxer'\nimport {Observable as O} from 'rx'\nimport R from 'ramda'\nimport {\n  CreateWriteBufferAtParams,\n  JSToBuffer$,\n  LocalFileSize$,\n  MetaPosition$,\n  ReadJSON$,\n  demuxFPH,\n  RequestWithMeta,\n  WriteBuffer,\n  SetMetaOffsets,\n  RxThrottleComplete,\n  RxTakeN,\n  GetThreadCount\n} from './Utils'\n\n/**\n * Reads a `.mtd` file and resumes the download from the last successfully saved\n * byte.\n * @function\n * @param {String} mtdPath - Relative path to the `.mtd` file.\n * @param {Object} [meta] - Optional meta data to override the one that's being\n * loaded from the `.mtd` file.\n * @return {external:Observable}\n * A {@link https://github.com/tusharmath/muxer multiplexed stream} containing ~\n * - `metaWritten$` - Meta data buffer stream.\n * - `response$` - HTTP response object.\n * - `responses$` - List of all the HTTP response objects.\n * - `localFileSize$` - Size of the `.mtd` file on disk.\n * - `fdR$` - File Descriptor in `r+` mode.\n * - `meta$` - Download meta information.\n */\nexport const DownloadFromMTDFile = R.curryN(2, ({FILE, HTTP}, mtdPath, _meta) => {\n  /**\n   * Open file to read+append\n   */\n  const fd$ = FILE.open(O.just([mtdPath, 'r+']))\n\n  /**\n   * Retrieve File size on disk\n   */\n  const size$ = LocalFileSize$({FILE, fd$})\n\n  /**\n   * Retrieve Meta info\n   */\n  const metaPosition$ = MetaPosition$({size$})\n  const meta$ = ReadJSON$({FILE, fd$, position$: metaPosition$})\n    .map(meta => R.merge(meta, _meta))\n\n  /**\n   * Make a HTTP request for each thread\n   */\n  const {response$, buffer$} = demuxFPH(\n    ['buffer$', 'response$'], RequestWithMeta(HTTP, meta$).share()\n  )\n\n  /**\n   * Select all the responses\n   */\n  const responses$ = RxTakeN(meta$.map(GetThreadCount), response$)\n\n  /**\n   * Create write params and save buffer+offset to disk\n   */\n  const bufferWritten$ = WriteBuffer({FILE, fd$, buffer$})\n\n  /**\n   * Update META info\n   */\n  const nMeta$ = SetMetaOffsets({meta$, bufferWritten$})\n\n  /**\n   * Persist META to disk\n   */\n  const metaWritten$ = FILE.write(CreateWriteBufferAtParams({\n    fd$,\n    buffer$: JSToBuffer$(RxThrottleComplete(meta$.pluck('metaWrite'), nMeta$)),\n    position$: size$\n  }))\n\n  /**\n   * Create sink$\n   */\n  return mux({\n    metaWritten$, response$, responses$,\n    localFileSize$: size$,\n    fdR$: fd$, metaPosition$,\n    meta$: O.merge(nMeta$, meta$)\n  })\n})\n"]}