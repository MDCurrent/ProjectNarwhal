{"version":3,"sources":["../src/FinalizeDownload.js"],"names":[],"mappings":";;;;AAIA;;;;;;;AAEA;;AACA;;AACA;;;;AACA;;;;;;;;;;;;;;;;AAcO,MAAM,8CAAmB,gBAAE,KAAF,CAAQ,CAAC,EAAC,IAAD,EAAD,EAAS,EAAC,GAAD,EAAM,KAAN,EAAT,KAA0B;AAChE,QAAM,CAAC,GAAD,EAAM,KAAN,IAAe,yBAAa,KAAb,EAAoB,SAApB,CAA8B,OAA9B,CAArB;AACA,QAAM,WAAW,CAAC,EAAC,IAAD,EAAO,KAAP,EAAc,GAAd,EAAD,KAAwB;AACvC,UAAM,QAAQ,MAAM,KAAN,CAAY,YAAZ,CAAd;AACA,WAAO,KAAK,QAAL,CAAc,eAAE,aAAF,CAAgB,GAAhB,EAAqB,KAArB,EAA4B,IAA5B,CAAiC,CAAjC,CAAd,CAAP;AACD,GAHD;AAIA,QAAM,SAAS,CAAC,EAAC,IAAD,EAAO,KAAP,EAAD,KAAmB;AAChC,UAAM,UAAU,MAAM,GAAN,CAAU,QAAQ,CAAC,KAAK,OAAN,EAAe,KAAK,IAApB,CAAlB,EAA6C,IAA7C,CAAkD,CAAlD,CAAhB;AACA,WAAO,KAAK,MAAL,CAAY,OAAZ,CAAP;AACD,GAHD;AAIA,SAAO,eAAE,KAAF,CACL,gBAAI,EAAC,KAAD,EAAJ,CADK,EAEL,IAAI,OAAJ,CAAY,MAAM;AAChB,UAAM,aAAa,SAAS,EAAC,IAAD,EAAO,KAAP,EAAc,GAAd,EAAT,CAAnB;AACA,UAAM,WAAW,WAAW,OAAX,CAAmB,MAAM,OAAO,EAAC,IAAD,EAAO,KAAP,EAAP,CAAzB,CAAjB;AACA,WAAO,gBAAI,EAAC,UAAD,EAAa,QAAb,EAAJ,CAAP;AACD,GAJD,CAFK,CAAP;AAQD,CAlB+B,CAAzB","file":"FinalizeDownload.js","sourcesContent":["/**\n * Created by tushar.mathur on 29/06/16.\n */\n\n'use strict'\n\nimport {mux} from 'muxer'\nimport {Observable as O} from 'rx'\nimport R from 'ramda'\nimport {IsCompleted$} from './Utils'\n\n/**\n * Removes the meta information and the `.mtd` extension from the file once the\n * download is successfully completed.\n * @function\n * @param {object} params - `{fd$, meta$}`\n * @param {external:Observable} params.fd$ - File descriptor Observable\n * @param {external:Observable} params.meta$ - Download meta information\n * @returns {external:Observable}\n * A {@link https://github.com/tusharmath/muxer multiplexed stream} containing ~\n * - `truncated$` - Fired when the meta data is removed.\n * - `renamed$` - Fired when the `.mtd` extension is removed.\n */\nexport const FinalizeDownload = R.curry(({FILE}, {fd$, meta$}) => {\n  const [ok$, noop$] = IsCompleted$(meta$).partition(Boolean)\n  const Truncate = ({FILE, meta$, fd$}) => {\n    const size$ = meta$.pluck('totalBytes')\n    return FILE.truncate(O.combineLatest(fd$, size$).take(1))\n  }\n  const Rename = ({FILE, meta$}) => {\n    const params$ = meta$.map(meta => [meta.mtdPath, meta.path]).take(1)\n    return FILE.rename(params$)\n  }\n  return O.merge(\n    mux({noop$}),\n    ok$.flatMap(() => {\n      const truncated$ = Truncate({FILE, meta$, fd$})\n      const renamed$ = truncated$.flatMap(() => Rename({FILE, meta$}))\n      return mux({truncated$, renamed$})\n    })\n  )\n})\n"]}