{"version":3,"sources":["../src/Utils.js"],"names":[],"mappings":"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","file":"Utils.js","sourcesContent":["/**\n * Created by tushar.mathur on 22/01/16.\n */\n\n'use strict'\n\nimport PATH from 'path'\nimport URL from 'url'\nimport {Observable as O} from 'rx'\nimport R from 'ramda'\nimport * as Rx from './RxFP'\nimport {mux, demux} from 'muxer'\nimport {MTDError, FILE_SIZE_UNKNOWN} from './Error'\n\nconst first = R.nth(0)\nconst second = R.nth(1)\nexport const trace = R.curry((msg, value) => {\n  console.log(msg, value)\n  return value\n})\nexport const demuxFP = R.curry((list, $) => demux($, ...list))\nexport const demuxFPH = R.curry((list, $) => R.head(demux($, ...list)))\nexport const BUFFER_SIZE = 1024 * 4\nexport const NormalizePath = (path) => PATH.resolve(process.cwd(), path)\nexport const GenerateFileName = (x) => {\n  return R.last(URL.parse(x).pathname.split('/')) || Date.now()\n}\nexport const ResolvePath = R.compose(NormalizePath, GenerateFileName)\nexport const SplitRange = (totalBytes, range) => {\n  const delta = Math.round(totalBytes / range)\n  const start = R.times((x) => x * delta, range)\n  const end = R.times((x) => (x + 1) * delta - 1, range)\n  end[range - 1] = totalBytes\n  return R.zip(start, end)\n}\nexport const CreateRangeHeader = ([start, end]) => `bytes=${start}-${end}`\nexport const SetRangeHeader = ({request, range}) => {\n  return R.set(\n    R.lensPath(['headers', 'range']),\n    CreateRangeHeader(range),\n    R.omit(['threads', 'offsets'], request)\n  )\n}\nexport const CreateRequestParams = ({meta, index}) => {\n  const range = [meta.offsets[index], second(meta.threads[index])]\n  return SetRangeHeader({request: meta, range})\n}\nexport const ToBuffer = R.curry((size, str) => {\n  var buffer = CreateFilledBuffer(size)\n  buffer.write(str)\n  return buffer\n})\nexport const CreateFilledBuffer = (size = BUFFER_SIZE, fill = ' ') => {\n  const buffer = new Buffer(size)\n  buffer.fill(fill)\n  return buffer\n}\nexport const MTDPath = (path) => path + '.mtd'\nexport const MergeDefaultOptions = (options) => R.mergeAll([\n  {range: 3, metaWrite: 300},\n  {mtdPath: MTDPath(R.prop('path', options))},\n  options\n])\n\n// TODO: Use R.lens instead\nexport const GetOffset = R.curry((meta, index) => meta.offsets[index])\nexport const GetThread = R.curry((meta, index) => meta.threads[index])\nexport const GetThreadStart = R.curryN(2, R.compose(R.nth(0), GetThread))\nexport const GetThreadEnd = R.curryN(2, R.compose(R.nth(1), GetThread))\nexport const GetThreadCount = R.compose(R.length, R.prop('threads'))\nexport const TimesCount = R.times(R.identity)\n\n/*\n * STREAM BASED\n */\nexport const GetBufferWriteOffset = ({buffer$, initialOffset}) => {\n  const accumulator = ([_buffer, _offset], buffer) => [buffer, _buffer.length + _offset]\n  return buffer$.scan(accumulator, [{length: 0}, initialOffset])\n}\nexport const SetBufferParams = ({buffer$, index, meta}) => {\n  const initialOffset = GetOffset(meta, index)\n  const addParams = R.compose(Rx.map(R.append(index)), GetBufferWriteOffset)\n  return addParams({buffer$, initialOffset})\n}\n\n/**\n * Makes an HTTP request using the {HttpRequest} function and appends the\n * buffer response with appropriate write position and thread index.\n * @function\n * @private\n * @param {Object} HTTP - HTTP transformer\n * @param {function} HTTP.request - HTTP request function\n * @param {Object} r - a dict of meta and selected thread index\n * @param {Object} r.meta - the download meta info\n * @param {Object} r.index - index of the selected thread\n * @returns {Observable} a muxed {buffer$, response$}\n */\nexport const RequestThread = R.curry((HTTP, {meta, index}) => {\n  const pluck = demuxFPH(['data$', 'response$'])\n  const HttpRequest = R.compose(HTTP.request, CreateRequestParams)\n  const {response$, data$} = pluck(HttpRequest({meta, index}))\n  const buffer$ = SetBufferParams({buffer$: data$, meta, index})\n  return mux({buffer$, response$})\n})\nexport const ToJSON$ = source$ => source$.map(JSON.stringify.bind(JSON))\nexport const ToBuffer$ = source$ => source$.map(ToBuffer(BUFFER_SIZE))\nexport const JSToBuffer$ = R.compose(ToBuffer$, ToJSON$)\nexport const BufferToJS$ = buffer$ => {\n  return buffer$.map(buffer => JSON.parse(buffer.toString()))\n}\nexport const RemoteFileSize$ = ({HTTP, options}) => {\n  return HTTP.requestHead(options)\n    .pluck('headers', 'content-length')\n    .map((x) => parseInt(x, 10))\n}\nexport const LocalFileSize$ = ({FILE, fd$}) => {\n  return FILE.fstat(fd$.map(R.of)).pluck('size')\n}\nexport const PickFirst = R.map(first)\nexport const CreateMeta$ = ({size$, options}) => {\n  return size$.map((totalBytes) => {\n    if (!isFinite(totalBytes)) throw new MTDError(FILE_SIZE_UNKNOWN)\n    const threads = SplitRange(totalBytes, options.range)\n    return R.merge(options, {totalBytes, threads, offsets: PickFirst(threads)})\n  })\n}\nexport const ReadFileAt$ = ({FILE, fd$, position$, size = BUFFER_SIZE}) => {\n  const readParams$ = O.combineLatest(position$, fd$)\n  const buffer = CreateFilledBuffer(size)\n  const toParam = ([position, fd]) => [fd, buffer, 0, buffer.length, position]\n  return FILE.read(readParams$.map(toParam))\n}\nexport const MetaPosition$ = ({size$}) => size$.map(R.add(-BUFFER_SIZE))\nexport const CreateWriteBufferAtParams = ({fd$, buffer$, position$}) => {\n  const toParam = ([buffer, fd, position]) => [fd, buffer, 0, buffer.length, position]\n  return O.combineLatest(buffer$, fd$, position$.first()).map(toParam)\n}\nexport const CreateWriteBufferParams = R.compose(\n  O.just,\n  ([fd, buffer, position]) => [fd, buffer, 0, buffer.length, position],\n  R.unnest\n)\nexport const SetMetaOffsets = ({meta$, bufferWritten$}) => {\n  const offsetLens = thread => R.compose(R.lensProp('offsets'), R.lensIndex(thread))\n  const start$ = meta$.map(meta => ({meta, len: 0, thread: 0})).first()\n  const source$ = O.merge(\n    start$,\n    bufferWritten$.map(x => [x[3], x[2]])\n      .map(R.zipObj(['len', 'thread']))\n      .withLatestFrom(meta$.map(R.objOf('meta')))\n      .map(R.mergeAll)\n  )\n\n  const accumulator = (previous, current) => {\n    const thread = current.thread\n    const pMeta = previous.meta\n    const oldVal = pMeta.offsets[thread]\n    const lens = offsetLens(thread)\n    const meta = R.set(lens, R.add(oldVal, current.len), pMeta)\n    return R.merge(current, {meta})\n  }\n  return source$\n    .scan(accumulator)\n    .skip(1)\n    .pluck('meta')\n}\nexport const ReadJSON$ = R.compose(BufferToJS$, Rx.map(second), ReadFileAt$)\nexport const IsOffsetInRange = R.curry((meta, i) => {\n  const start = R.lte(GetThreadStart(meta, i))\n  const end = R.gt(GetThreadEnd(meta, i))\n  const inRange = R.allPass([start, end])\n  return inRange(GetOffset(meta, i))\n})\nexport const FlattenMeta$ = Rx.flatMap((meta) => {\n  const MergeMeta = R.map(R.compose(R.merge({meta}), R.objOf('index')))\n  const IsValid = R.filter(IsOffsetInRange(meta))\n  return MergeMeta(IsValid(TimesCount(GetThreadCount(meta))))\n})\nexport const RxThrottleComplete = (window$, $, sh) => {\n  const selector = window => O.merge($.throttle(window, sh), $.last())\n  return window$.first().flatMap(selector)\n}\nexport const IsCompleted$ = (meta$) => {\n  const offsetsA = R.prop('offsets')\n  const offsetsB = R.compose(R.map(second), R.prop('threads'))\n  const subtract = R.apply(R.subtract)\n  const diff = R.compose(R.all(R.lte(0)), R.map(subtract), R.zip)\n  const isComplete = R.converge(diff, [offsetsA, offsetsB])\n  return meta$.map(isComplete).distinctUntilChanged()\n}\nexport const TapBetween = R.curry((min, max, value) => {\n  return Math.min(max, Math.max(min, value))\n})\n\n/**\n * Util method that calculates the total completion percentage (between 0-100).\n * @function\n * @param {Observable} meta$ Meta data stream ie. exposed by {@link DownloadFromMTDFile}\n * @return {external:Observable} Value between 0-100\n */\nexport const Completion = (meta$) => {\n  const tap0To100 = TapBetween(0, 1)\n  return meta$.map(meta => {\n    const total = meta.totalBytes\n    const downloaded = R.sum(meta.offsets) - R.sum(R.map(R.nth(0), meta.threads)) + R.length(meta.threads) - 1\n    return tap0To100(Math.ceil(downloaded / total * 100) / 100)\n  })\n}\nexport const WriteBuffer = ({FILE, fd$, buffer$}) => {\n  const Write = R.compose(FILE.write, CreateWriteBufferParams)\n  return O.combineLatest(fd$, buffer$)\n    .flatMap(params => {\n      return Write(params).map(R.concat(R.nth(1, params)))\n    })\n}\n/**\n * Makes HTTP requests to start downloading data for each thread described in\n * the meta data.\n * @function\n * @private\n * @param {Object} HTTP - an HTTP transformer\n * @param {function} HTTP.request - an HTTP transformer\n * @param {Observable} meta$ - meta data as a stream\n * @returns {Observable} - muxed stream of responses$ and buffer$\n */\nexport const RequestWithMeta = R.uncurryN(2, (HTTP) => R.compose(\n  Rx.flatMap(RequestThread(HTTP)),\n  FlattenMeta$\n))\n\nexport const DOWNLOAD_TYPES = {\n  NEW: 0,\n  OLD: 1\n}\nexport const RemoveExtension = R.replace(/\\.mtd$/, '')\nexport const GetDownloadType = R.curry((NormalizePath, options$) => {\n  const MergeType = type => R.compose(R.merge({type}), R.objOf('options'))\n  const GetPathFromURL = R.compose(NormalizePath, GenerateFileName, R.prop('url'))\n  const GetPathFromFile = R.compose(NormalizePath, RemoveExtension, R.prop('file'))\n  const GetMtdPathFromPath = R.compose(MTDPath, R.prop('path'))\n  const MetaAssoc = R.curry((prop, T, options) => R.assoc(prop, T(options), options))\n  const setPathFromURL = MetaAssoc('path', GetPathFromURL)\n  const setPathFromFile = MetaAssoc('path', GetPathFromFile)\n  const setMtdPath = MetaAssoc('mtdPath', GetMtdPathFromPath)\n\n  const [ok$, not$] = options$.partition(x => x.url)\n  return O.merge(\n    ok$.map(R.compose(setMtdPath, setPathFromURL)).map(MergeType(DOWNLOAD_TYPES.NEW)),\n    not$.map(R.compose(setMtdPath, setPathFromFile)).map(MergeType(DOWNLOAD_TYPES.OLD))\n  )\n})\nexport const CliValidOptions = R.anyPass([R.has('url'), R.has('file')])\nexport const RxTakeN = R.curry((n$, $) => {\n  const accum = (memory, [value, count]) => {\n    return {list: R.append(value, memory.list), count}\n  }\n  return $.withLatestFrom(n$).scan(accum, {list: []})\n    .filter(({list, count}) => R.equals(R.length(list), count))\n    .pluck('list')\n    .take(1)\n})\n"]}