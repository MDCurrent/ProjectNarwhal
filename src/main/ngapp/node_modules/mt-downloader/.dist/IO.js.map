{"version":3,"sources":["../src/IO.js"],"names":[],"mappings":"AAAA;;;;;;;AAEA;;AACA;;IAAY,E;;AACZ;;AACA;;;;AACA;;;;;;AAEO,MAAM,0BAAS,gBAAE,OAAF,CAAU,gBAAE,KAAZ,EAAmB,eAAE,gBAArB,CAAf;AACA,MAAM,sBAAO,MAAM,gBAAE,OAAF,CACxB,GAAG,WAAH,CAAe,CAAf,CADwB,EAExB,GAAG,OAAH,CAAW,OAAO,EAAP,CAAX,CAFwB,CAAnB;;;;;;;;;AAYA,MAAM,sBAAO,gBAAE,KAAF,CAAS,EAAD,IAAQ;AAClC,SAAO;;;;;;;AAOL,UAAM,KAAK,GAAG,IAAR,CAPD;;;;;;;;;AAgBL,WAAO,KAAK,GAAG,KAAR,CAhBF;;;;;;;;;AAyBL,UAAM,KAAK,GAAG,IAAR,CAzBD;;;;;;;;;AAkCL,WAAO,KAAK,GAAG,KAAR,CAlCF;;;;;;;;;AA2CL,WAAO,KAAK,GAAG,KAAR,CA3CF;;;;;;;;;AAoDL,cAAU,KAAK,GAAG,QAAR,CApDL;;;;;;;;;AA6DL,YAAQ,KAAK,GAAG,MAAR;AA7DH,GAAP;AA+DD,CAhEmB,CAAb;;;;;AAqEA,MAAM,sBAAO,gBAAE,KAAF,CAAS,QAAD,IAAc;AACxC,QAAM,UAAU,sBAAQ,QAAR,CAAhB;AACA,QAAM,cAAe,MAAD,IAAY;AAC9B,UAAM,CAAC,EAAC,SAAD,EAAD,IAAgB,kBAAM,QAAQ,MAAR,CAAN,EAAuB,WAAvB,CAAtB;AACA,WAAO,UAAU,KAAV,GAAkB,GAAlB,CAAsB,KAAK,EAAE,OAAF,EAA3B,EAAwC,KAAxC,EAAP;AACD,GAHD;;AAKA,QAAM,SAAS,gBAAE,KAAF,CAAQ,CAAC,KAAD,EAAQ,QAAR,KAAqB,SAAS,MAAT,CAAgB,KAAK,EAAE,KAAF,KAAY,KAAjC,EAAwC,KAAxC,CAA8C,SAA9C,CAA7B,CAAf;AACA,SAAO;AACL,eADK;AAEL,UAFK;;;;;;;;AAUL;AAVK,GAAP;AAYD,CApBmB,CAAb;;AAsBA,MAAM,oBAAM,gBAAE,KAAF,CAAS,WAAD,IAAiB;AAC1C,QAAM,MAAM,IAAI,WAAJ,CAAgB,gBAAhB,EAAkC;AAC5C,WAAO,IADqC;AAE5C,cAAU,GAFkC;AAG5C,gBAAY;AAHgC,GAAlC,CAAZ;AAKA,SAAO,IAAI,MAAJ,CAAW,IAAX,CAAgB,GAAhB,CAAP;AACD,CAPkB,CAAZ","file":"IO.js","sourcesContent":["'use strict'\n\nimport {Observable as O} from 'rx'\nimport * as Rx from './RxFP'\nimport {demux} from 'muxer'\nimport R from 'ramda'\nimport {Request} from './Request'\n\nexport const fromCB = R.compose(R.apply, O.fromNodeCallback)\nexport const toOB = cb => R.compose(\n  Rx.shareReplay(1),\n  Rx.flatMap(fromCB(cb))\n)\n\n/**\n * Provides wrappers over the async utils inside the\n * {@link https://nodejs.org/api/fs.html fs module}.\n * The wrappers take in an input stream of arguments\n * and returns the result of function call as another stream.\n * @namespace FILE\n */\nexport const FILE = R.curry((fs) => {\n  return {\n    /**\n     * @function\n     * @memberOf FILE\n     * @param {external:Observable} params$\n     * @return {external:Observable}\n     */\n    open: toOB(fs.open),\n\n    /**\n     * {@link https://nodejs.org/api/fs.html#fs_fs_open_path_flags_mode_callback}\n     * @function\n     * @memberOf FILE\n     * @param {external:Observable} params$\n     * @return {external:Observable}\n     */\n    fstat: toOB(fs.fstat),\n\n    /**\n     * {@link https://nodejs.org/api/fs.html#fs_fs_read_fd_buffer_offset_length_position_callback}\n     * @function\n     * @memberOf FILE\n     * @param {external:Observable} params$\n     * @return {external:Observable}\n     */\n    read: toOB(fs.read),\n\n    /**\n     * {@link https://nodejs.org/api/fs.html#fs_fs_write_fd_buffer_offset_length_position_callback}\n     * @function\n     * @memberOf FILE\n     * @param {external:Observable} params$\n     * @return {external:Observable}\n     */\n    write: toOB(fs.write),\n\n    /**\n     * {@link https://nodejs.org/api/fs.html#fs_fs_close_fd_callback}\n     * @function\n     * @memberOf FILE\n     * @param {external:Observable} params$\n     * @return {external:Observable}\n     */\n    close: toOB(fs.close),\n\n    /**\n     * {@link https://nodejs.org/api/fs.html#fs_fs_truncate_path_len_callback}\n     * @function\n     * @memberOf FILE\n     * @param {external:Observable} params$\n     * @return {external:Observable}\n     */\n    truncate: toOB(fs.truncate),\n\n    /**\n     * {@link https://nodejs.org/api/fs.html#fs_fs_rename_oldpath_newpath_callback}\n     * @function\n     * @memberOf FILE\n     * @param {external:Observable} params$\n     * @return {external:Observable}\n     */\n    rename: toOB(fs.rename)\n  }\n})\n\n/**\n * @namespace HTTP\n */\nexport const HTTP = R.curry((_request) => {\n  const request = Request(_request)\n  const requestHead = (params) => {\n    const [{response$}] = demux(request(params), 'response$')\n    return response$.first().tap(x => x.destroy()).share()\n  }\n\n  const select = R.curry((event, request$) => request$.filter(x => x.event === event).pluck('message'))\n  return {\n    requestHead,\n    select,\n    /**\n     * Stream based wrapper over {@link https://www.npmjs.com/package/request npm/request}\n     * @function\n     * @memberOf HTTP\n     * @param {object} params - {@link https://www.npmjs.com/package/request  request} module params.\n     * @return {external:Observable} multiplex stream\n     */\n    request\n  }\n})\n\nexport const BAR = R.curry((ProgressBar) => {\n  const bar = new ProgressBar(':bar :percent ', {\n    total: 1000,\n    complete: '█',\n    incomplete: '░'\n  })\n  return bar.update.bind(bar)\n})\n"]}