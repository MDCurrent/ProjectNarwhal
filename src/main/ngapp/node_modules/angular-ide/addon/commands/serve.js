/* global commandOptions */
'use strict';

const getNGCLIManifest = require('../../lib/CLUtils').getNGCLIManifest;
const getNGCLIPath = require('../../lib/CLUtils').getNGCLIPath;
const ngCLIPKG = getNGCLIManifest();

const ngCLIPKGName = ngCLIPKG.name;
const ngCLIPath = getNGCLIPath(ngCLIPKGName);

let devServer;
try {
 devServer = require('webpack-dev-server');
} catch(e) {
  devServer = require('@angular/cli/node_modules/webpack-dev-server/lib/Server');
  require.cache['webpack-dev-server'] = require('@angular/cli/node_modules/webpack-dev-server/lib/Server');
}
const Serve = require(`${ngCLIPath}/commands/serve`).default;
const intercept = require('intercept-stdout');
const semver = require('semver');

const extractNGEvent = require('../utils/extractNGEvent');
const wsManager = require('../services/WSConnectionsManager');

const NGEventType = require('../utils/consts').NGEventType;
const BuildStatus = require('../utils/consts').BuildStatus;
const NGServerStatus = require('../utils/consts').NGServerStatus;

const getRunningInstallations = require('../../lib/utils').getRunningInstallations;

const getNPMPackage = require('../../lib/utils').getNPMPackage;

const injectComponentMetadata = require('../../lib/CLUtils').injectComponentMetadata;
const injectCLBootstrapScript = require('../../lib/CLUtils').injectCLBootstrapScript;

const CLEnablementStatusManager = require('../../lib/CLEnablementStatusManager').CLEnablementStatusManager;

const supportedVersions = require('../../supported_versions.json').supported_versions;

const debug = require('debug')('angular-ide');
const chalk = require('chalk');

let middleware = null;

const Q = require('q');

const aliveMessageData = {
  serverId: Date.now(),
  projectPath: null,
  commandOptions: null,
  command: 'registerServer',
  method: 'registerServer',
};

const ngServeStatus = {
  serverStatus: NGServerStatus.STARTING,
  build: {
    status: BuildStatus.NOT_READY,
    errors: [],
  },
};

// add webclipse-launch-id to supported options
Serve.prototype.availableOptions.push(
  { name: 'webclipse-launch-id', type: String }
);

module.exports = Serve.extend({
  run(commandOptions) {
    const originalListen = devServer.prototype.listen;

    devServer.prototype.listen = function () {
      middleware = this.middleware;
      return originalListen.apply(this, arguments);
    };

    const ngCLIPackage = ngCLIPKG;
    const ngIDEPackage = getNPMPackage('angular-ide');

    debug(`angular-cli version detected: ${ngCLIPackage.version}`);
    debug(`angular-ide version detected: ${ngIDEPackage.version}`);

    const prereleaseParts = semver.prerelease(ngCLIPackage.version);
    if (prereleaseParts &&
      prereleaseParts.length > 1 &&
      typeof prereleaseParts[1] === 'string'
    ) {
      ngCLIPackage.version = ngCLIPackage.version.replace(`${prereleaseParts[0]}.${prereleaseParts[1]}`,
        `${prereleaseParts[0]}.${parseInt(prereleaseParts[1])}`
      );
      debug('Normalizing package version with', ngCLIPackage.version);
    }

    const angularCLIVersionSupported = supportedVersions.find((versionRules) => {
      return semver.satisfies(ngCLIPackage.version, versionRules['angular-cli'], false) &&
        semver.satisfies(ngIDEPackage.version, versionRules['angular-ide'], false);
    });

    if (angularCLIVersionSupported) {
      debug('angular-cli version supported!');
    } else {
      debug(chalk.red('angular-cli version not supported supported!'));
    }

    try {
      injectComponentMetadata(ngCLIPackage.version);
    } catch (e) {
      console.log('[angular-ide] Error while injecting component metadata');
    }

    aliveMessageData.commandOptions = commandOptions;
    aliveMessageData.projectPath = this.project.root;

    wsManager.onConnect(JSON.stringify(aliveMessageData));
    wsManager.registerServerStatus(ngServeStatus);


    if (process.env.NG_IDE_PORT) {
      wsManager.register(process.env.NG_IDE_PORT);
    } else {
      getRunningInstallations()
        .subscribe(installations => {
          installations.forEach(installation => {
            wsManager.register(installation.port);
          });
        });
    }


    /*
    * Intercepting stdout to extract relevant info
    * e.g. Where the dev server is running, error build, etc.
    */
    intercept((text) => {
      const ngEvent = extractNGEvent(text);

      if (ngEvent) {
        switch (ngEvent.type) {
          case NGEventType.NG_SERVER_STATUS:
            ngServeStatus.serverStatus = ngEvent.params.status;
            wsManager.sendEventToAll('ng-serve-status-update');
            break;

          case NGEventType.BUILD_STATUS:
            // Resetting build error when a new build starts
            if (ngEvent.params.status === BuildStatus.BUILD_STARTED) {
              ngServeStatus.build.errors = [];
            }

            ngServeStatus.build.status = ngEvent.params.status;
            wsManager.sendEventToAll('ng-serve-status-update');
            break;

          case NGEventType.BUILD_ERROR:
            ngServeStatus.build.errors.push(ngEvent.params);
            break;

          default:
            // TODO: Handle unknown NGEventType
        }
      }

      return text;
    });


    const promise = Q.Promise(function (resolve) {
      const bootstrapScriptConfig = {
        host: '127.0.0.1',
        port: null,
      };

      if (process.env.NG_IDE_PORT) {
        debug(`NG_IDE_PORT: ${process.env.NG_IDE_PORT}`);
        bootstrapScriptConfig.port = process.env.NG_IDE_PORT;
        try {
          injectCLBootstrapScript(ngCLIPackage.version, bootstrapScriptConfig);
        } catch (e) {
          console.log('[angular-ide] Error while injecting bootstrap script');
        }
        resolve(this._super.run.apply(this, [commandOptions]));
      } else {
        debug('NG_IDE_PORT not set');
        getRunningInstallations()
          .subscribe(installations => {
            if (installations.length > 0) {
              const sortedInstallations = installations.sort((installA, installB) => {
                return installA.used < installB.used;
              });

              const installation = installations[0];

              bootstrapScriptConfig.port = installation.port;
              try {
                injectCLBootstrapScript(ngCLIPackage.version, bootstrapScriptConfig);
              } catch (e) {
                console.log('[angular-ide] Error while injecting bootstrap script');
              }
              resolve(this._super.run.apply(this, [commandOptions]));
            }
          });
      }
    }.bind(this));

    wsManager.on('message', function (ws, data) {
      const message = JSON.parse(data);
      switch (message.command) {
        case 'terminate':
          process.exit();
          break;
        case 'injectCL':
          // Only inject CodeLive in "development" environment
          if (commandOptions.environment === 'dev' || commandOptions.target === 'development' ) {
            CLEnablementStatusManager.setStatus(message.commandOptions.inject);
            middleware.invalidate();
          }
          break;
        default:
          // TODO: Handle unknown command
      }

    }.bind(this));

    return promise;
  },
});

module.exports.overrideCore = true;
